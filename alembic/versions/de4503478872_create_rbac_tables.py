"""create rbac tables

Revision ID: de4503478872
Revises: 437aeceee1d5
Create Date: 2024-09-05 16:31:30.892083

"""
from typing import Sequence, Union

from alembic import op
import sqlalchemy as sa
import uuid


# revision identifiers, used by Alembic.
revision: str = 'de4503478872'
down_revision: Union[str, None] = '437aeceee1d5'
branch_labels: Union[str, Sequence[str], None] = None
depends_on: Union[str, Sequence[str], None] = None


def upgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    # Create tables
    op.create_table('policies',
        sa.Column('id', sa.Text(), primary_key=True, default=lambda: str(uuid.uuid4())),
        sa.Column('name', sa.String(), nullable=False),
        sa.Column('can_create', sa.Boolean(), nullable=True),
        sa.Column('can_read', sa.Boolean(), nullable=True),
        sa.Column('can_update', sa.Boolean(), nullable=True),
        sa.Column('can_delete', sa.Boolean(), nullable=True),
        sa.UniqueConstraint('name')
    )

    op.create_table('roles',
        sa.Column('id', sa.Text(), primary_key=True, default=lambda: str(uuid.uuid4())),
        sa.Column('name', sa.String(), nullable=False),
        sa.UniqueConstraint('name')
    )

    op.create_table('groups',
        sa.Column('id', sa.Text(), primary_key=True, default=lambda: str(uuid.uuid4())),
        sa.Column('name', sa.String(), nullable=False),
        sa.UniqueConstraint('name')
    )

    op.create_table('role_policy',
        sa.Column('role_id', sa.Text(), sa.ForeignKey('roles.id'), primary_key=True),
        sa.Column('policy_id', sa.Text(), sa.ForeignKey('policies.id'), primary_key=True)
    )

    op.create_table('group_roles',
        sa.Column('group_id', sa.Text(), sa.ForeignKey('groups.id'), primary_key=True),
        sa.Column('role_id', sa.Text(), sa.ForeignKey('roles.id'), primary_key=True)
    )

    op.create_table('user_group',
        sa.Column('user_id', sa.Text(), sa.ForeignKey('users.id'), primary_key=True),
        sa.Column('group_id', sa.Text(), sa.ForeignKey('groups.id'), primary_key=True)
    )

    # Insert initial data
    connection = op.get_bind()

    policies = [
        {"id": str(uuid.uuid4()), "name": "create", "can_create": True, "can_read": False, "can_update": False, "can_delete": False},
        {"id": str(uuid.uuid4()), "name": "read", "can_create": False, "can_read": True, "can_update": False, "can_delete": False},
        {"id": str(uuid.uuid4()), "name": "update", "can_create": False, "can_read": False, "can_update": True, "can_delete": False},
        {"id": str(uuid.uuid4()), "name": "delete", "can_create": False, "can_read": False, "can_update": False, "can_delete": True}
    ]
    op.bulk_insert(sa.table('policies', 
        sa.Column('id', sa.Text()),
        sa.Column('name', sa.String()),
        sa.Column('can_create', sa.Boolean()),
        sa.Column('can_read', sa.Boolean()),
        sa.Column('can_update', sa.Boolean()),
        sa.Column('can_delete', sa.Boolean())
    ), policies)

    roles = [
        {"id": str(uuid.uuid4()), "name": "pet_create"},
        {"id": str(uuid.uuid4()), "name": "pet_read"},
        {"id": str(uuid.uuid4()), "name": "pet_update"},
        {"id": str(uuid.uuid4()), "name": "pet_delete"},
        {"id": str(uuid.uuid4()), "name": "plan_create"},
        {"id": str(uuid.uuid4()), "name": "plan_read"},
        {"id": str(uuid.uuid4()), "name": "plan_update"},
        {"id": str(uuid.uuid4()), "name": "plan_delete"},
        {"id": str(uuid.uuid4()), "name": "plan_sign_pet_create"},
        {"id": str(uuid.uuid4()), "name": "plan_sign_pet_read"},
        {"id": str(uuid.uuid4()), "name": "plan_sign_pet_update"},
        {"id": str(uuid.uuid4()), "name": "plan_sign_pet_delete"},
        {"id": str(uuid.uuid4()), "name": "role_create"},
        {"id": str(uuid.uuid4()), "name": "role_read"},
        {"id": str(uuid.uuid4()), "name": "role_update"},
        {"id": str(uuid.uuid4()), "name": "role_delete"},
        {"id": str(uuid.uuid4()), "name": "group_create"},
        {"id": str(uuid.uuid4()), "name": "group_read"},
        {"id": str(uuid.uuid4()), "name": "group_update"},
        {"id": str(uuid.uuid4()), "name": "group_delete"},
        {"id": str(uuid.uuid4()), "name": "group_in_user_create"},
        {"id": str(uuid.uuid4()), "name": "group_out_user_delete"},
        {"id": str(uuid.uuid4()), "name": "group_in_role_create"},
        {"id": str(uuid.uuid4()), "name": "group_out_role_delete"},
    ]

    op.bulk_insert(sa.table('roles', 
        sa.Column('id', sa.Text()),
        sa.Column('name', sa.String())
    ), roles)

    # Create role-policy relationships
    for role in roles:
        policy = next((p for p in policies if p['name'] == role['name'].split('_')[-1]), None)
        if policy:
            connection.execute(
                sa.text("INSERT INTO role_policy (role_id, policy_id) VALUES (:role_id, :policy_id)")
                .bindparams(role_id=role['id'], policy_id=policy['id'])
            )

    # Create groups
    groups = [
        {"id": str(uuid.uuid4()), "name": "client"},
        {"id": str(uuid.uuid4()), "name": "admin"}
    ]
    op.bulk_insert(sa.table('groups', 
        sa.Column('id', sa.Text()),
        sa.Column('name', sa.String())
    ), groups)

    # Assign roles to groups
    client_group = next(g for g in groups if g['name'] == 'client')
    admin_group = next(g for g in groups if g['name'] == 'admin')

    client_roles = ['pet_create', 'pet_read', 'pet_update', 'pet_delete', 
                    'plan_sign_pet_create', 'plan_sign_pet_read', 'plan_sign_pet_update', 'plan_sign_pet_delete']
    admin_roles = client_roles + ['plan_create', 'plan_read', 'plan_update', 'plan_delete', 'role_create', 'role_read', 'role_update', 'role_delete', 'group_create', 'group_read', 'group_update', 'group_delete', 'group_in_user_create', 'group_out_user_delete', 'group_in_role_create', 'group_out_role_delete']

    for role_name in client_roles:
        role = next(r for r in roles if r['name'] == role_name)
        connection.execute(
            sa.text("INSERT INTO group_roles (group_id, role_id) VALUES (:group_id, :role_id)")
            .bindparams(group_id=client_group['id'], role_id=role['id'])
        )

    for role_name in admin_roles:
        role = next(r for r in roles if r['name'] == role_name)
        connection.execute(
            sa.text("INSERT INTO group_roles (group_id, role_id) VALUES (:group_id, :role_id)")
            .bindparams(group_id=admin_group['id'], role_id=role['id'])
        )
    # ### end Alembic commands ###


def downgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.drop_table('user_group')
    op.drop_table('group_roles')
    op.drop_table('role_policy')
    op.drop_table('groups')
    op.drop_table('roles')
    op.drop_table('policies')
    # ### end Alembic commands ###
